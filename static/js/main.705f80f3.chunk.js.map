{"version":3,"sources":["components/header/Header.js","components/createnote/CreateNote.js","components/notecomp/Note.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","CreateNote","props","useState","title","content","note","setNote","InputChange","event","value","target","name","prevData","type","placeholder","autoComplete","onChange","onClick","alert","getNote","Note","deleteItem","index","App","allnote","setAllNotes","console","log","id","newnote","filter","singlenote","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAWeA,EARA,WACX,OACI,qBAAKC,UAAU,SAAf,SACI,8C,gCC+CGC,G,MAjDI,SAACC,GAEhB,MAAwBC,mBAAS,CAC7BC,MAAO,GACPC,QAAS,KAFb,mBAAOC,EAAP,KAAaC,EAAb,KAKMC,EAAc,SAACC,GAEjB,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KAC1BL,GAAQ,SAACM,GAEL,OAAO,2BACAA,GADP,kBAEKD,EAAOF,QAuBpB,OACI,qBAAKV,UAAU,aAAf,SACI,iCACI,uBAAOc,KAAK,OAAOF,KAAK,QAAQG,YAAY,WAAWC,aAAa,MAAMN,MAAOJ,EAAKF,MAAOa,SAAUT,IACvG,0BAAUM,KAAK,OAAOF,KAAK,UAAUG,YAAY,sBAAsBL,MAAOJ,EAAKD,QAASY,SAAUT,IACtG,wBAAQM,KAAK,SAASI,QAtBd,WACD,IAAZZ,EAAKF,OAA2B,IAAdE,EAAKD,QAEtBc,MAAM,4BAIRjB,EAAMkB,QAAQd,GACdC,EAAQ,CACNH,MAAO,GACPC,QAAS,OAYL,SAAgD,cAAC,IAAD,a,iBCnBjDgB,G,MAvBF,SAACnB,GAQV,OAEI,sBAAKF,UAAU,aAAf,UACI,wCAAWE,EAAME,SACjB,yCAAYF,EAAMG,WAClB,wBAAQS,KAAK,SAASI,QAXb,SAACT,GAEZP,EAAMoB,WAAWpB,EAAMqB,QASrB,SAA2C,cAAC,IAAD,WC8BxCC,MAxCf,WAEG,MAA4BrB,mBAAS,IAArC,mBAAOsB,EAAP,KAAeC,EAAf,KAMDC,QAAQC,IAAI,0BAA0BH,GAEtC,IAAMH,EAAW,SAACO,GACdF,QAAQC,IAAI,wCAAwCC,GACnD,IAAMC,EAAQL,EAAQM,QAAO,SAACC,EAAWT,GACnC,OAAOA,IAAQM,KAEnBH,EAAYI,IAInB,OACE,sBAAK9B,UAAU,MAAf,UACM,cAAC,EAAD,IACA,cAAC,EAAD,CAAYoB,QAlBN,SAACd,GACbqB,QAAQC,IAAI,mBAAmBtB,GAC7BoB,EAAY,CAACpB,GAAF,mBAAUmB,QAiBjB,qBAAKzB,UAAU,QAAf,SAGGyB,EAAQQ,OAAO,EACfR,EAAQS,KAAI,SAACF,EAAWT,GAAZ,OACR,cAAC,EAAD,CAAMnB,MAAO4B,EAAW5B,MAAOC,QAAS2B,EAAW3B,QAAqBkB,MAAOA,EAAOD,WAAYA,GAAjCC,MACnE,qBAAKvB,UAAU,WAAf,SACA,yDC1BAmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.705f80f3.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div className=\"header\">\r\n            <h1>Note Keep</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useState } from 'react'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport './CreateNote.css'\r\n\r\nconst CreateNote = (props) => {\r\n    // here we have to store all the data \r\n    const [note, setNote] = useState({\r\n        title: \"\",\r\n        content: \"\"\r\n    })\r\n\r\n    const InputChange = (event) => {\r\n        // how i will get the value for both input and textarea\r\n        const value = event.target.value;\r\n        const name = event.target.name;\r\n        setNote((prevData) => {\r\n\r\n            return {\r\n                ...prevData,\r\n                [name]: value,\r\n\r\n            }\r\n\r\n        })\r\n}\r\n  const setDataToParent=()=>{\r\n        if(note.title==\"\" || note.content==\"\")\r\n        {\r\n            alert(\"enter title and note...\");\r\n        }\r\n        else\r\n        {\r\n          props.getNote(note);\r\n          setNote({\r\n            title: \"\",\r\n            content: \"\"\r\n          })\r\n        }\r\n  }\r\n\r\n    //console.log(\"what is store in\",note);\r\n \r\n    return (\r\n        <div className=\"createnote\">\r\n            <form >\r\n                <input type=\"text\" name=\"title\" placeholder=\"title...\" autoComplete=\"off\" value={note.title} onChange={InputChange} />\r\n                <textarea type=\"text\" name=\"content\" placeholder=\"Enter your notes...\" value={note.content} onChange={InputChange} />\r\n                <button type=\"button\" onClick={setDataToParent}><AddIcon /></button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateNote","import React from 'react'\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport './Note.css'\r\n\r\n\r\nconst Note = (props) => {\r\n   \r\n    const deleteItem=(event)=>{\r\n          // how we will get the id to delete the elements \r\n          props.deleteItem(props.index);\r\n          \r\n    }\r\n\r\n    return (\r\n         \r\n        <div className=\"singlenote\">\r\n            <h4>Title:{props.title}</h4>\r\n            <p>Content:{props.content}</p>\r\n            <button type=\"button\" onClick={deleteItem}><DeleteIcon /></button>\r\n        </div>\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Note\r\n","import './App.css';\nimport React,{useState} from 'react'\nimport Header from './components/header/Header'\nimport CreateNote from './components/createnote/CreateNote'\nimport Note from './components/notecomp/Note'\n//import Footer from './components/footer/Footer'\n\n\nfunction App() {\n   \n   const [allnote,setAllNotes]=useState([]);\n\n  const addNote=(note)=>{\n    console.log(\"getting the note\",note);\n      setAllNotes([note,...allnote]);\n  }\n  console.log(\"I am getting in allnote\",allnote);\n\n  const deleteItem=(id)=>{\n      console.log(\"I am getting id to delete from array \",id);\n       const newnote=allnote.filter((singlenote,index)=>{\n             return index!==id; \n         })\n         setAllNotes(newnote);\n\n  }\n\n  return (\n    <div className=\"App\">\n          <Header/>    \n          <CreateNote getNote={addNote}/>\n          <div className=\"notes\">\n           \n           {\n             allnote.length>0? \n             allnote.map((singlenote,index)=>\n                 <Note title={singlenote.title} content={singlenote.content} key={index} index={index} deleteItem={deleteItem}/>\n             ):<div className=\"notfound\">\n               <h1>Notes Not Found</h1>\n             </div>\n           }\n          </div>\n          \n         \n         </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}